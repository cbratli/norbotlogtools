import variableTunerConfig as config
""" Generates a C - file that can be used on the receiving side where we are to control the varibles
    note that min and max is not used inside the C file for now, since this gives more flexibility, but it also implies that
    variables may be set to out of range values. It is done like this because its regarded as not a critical system, and flexibility is
    more important than security.
"""

class GenereateCcodeVariableTunerFile:

    def __init__(self):
        pass
        
        
    def generateSendOneVariableViaJson(self):
        """One variable as JSON via Serial. 
            '{"K_p": 4.3}'
        """       
        return r"""
void sendOneTunableVariablesAsJson(char * variableName, float value, int digits)
{
  Serial1.println(""); 
  Serial1.print("{\""); 
  Serial1.print(variableName);
  Serial1.print("\":"); 
  Serial1.print(value,digits); 
  Serial1.println("}"); 
}
  """
    
    
    def getSerialInputFunctions(self):
        return r"""void getIncomingDataFromSerial() {
  const int SERIAL_INPUT_BUF_SIZE=50;
  static char buf[SERIAL_INPUT_BUF_SIZE];
  static char count = 0;

  char character = 'd'; // Dummy not equal to '\n'
  while (Serial1.available()) 
  {   
      char character = Serial1.read(); 
      if (character == 0xD || character == 0xA )
      { 
        buf[count++] = '\0';
        if (count > 1)
        {
          setNewValueIfNewVariableValueCommand(buf);
          checkIncomingCommand(buf);
        }
        count=0;
      } else
      {
         buf[count++] = character;
      }

      if (count >= SERIAL_INPUT_BUF_SIZE-1)
      {
        // buffer is full. The "-1" on the size is because we will null terminate the string.
        count = 0;
      }
  }
}


void setNewValueIfNewVariableValueCommand(char * buf)
{
// A new variable value is in the following format.
// :pwd:variableName:newValue:
// 1. test that it starts with :
// 2. find position of next :
// 3. test password
// 5. Get the variable name
// 6. find position of next :
// 7. get the new value.
  //Serial.println("Test incoming");
  //Serial.println( buf);  
  
  if  (buf[0] == ':') {
    //Serial.println("STARTS WITH :"); 
    char *variablePtr = strchr(&buf[1],':');
    variablePtr[0] = '\0';
    if (strcmp(&buf[1],"%s") == 0) {
      //Serial.println("Password ok");
      char * valuePtr = strchr(&variablePtr[1],':');
      valuePtr[0] = '\0';
      //Serial.print("Variable:");
      //Serial.println( (variablePtr+1));  
      //Serial.print("Value:");
      //Serial.println( (valuePtr+1));
    setNewVariableValue((variablePtr+1), (valuePtr+1));
    }
  }
}
    
""" % (config.password)
    
    
    
        
        
    def getCodeToSendVariableViaJson(self, displayFormat, variableName):
        """One variable as JSON via Serial. 
            '{"K_p": 4.3}'
        """
        digits = 1;
        if displayFormat[1] is '.':
            digits = int(displayFormat[2:-1])
        return """sendOneTunableVariablesAsJson("%s", %s, %d);""" % (variableName,variableName, digits)
            
        #return r"""Serial1.println("{\"%s\":"); Serial1.println(%s,%d); Serial1.println("}"); """ %(variableName,variableName, digits)

    def getVariableTypeFromDisplayFormat(self, displayFormat, variableName):
        if displayFormat[-1] is 'f':
            return "%s = atof(newValueBuf);" % variableName
        if displayFormat[-1] is 'd' or displayFormat[-1] is 'i':
            return "%s = atoi(newValueBuf);" % variableName
            
        print("Unknown displayformat %s for variable %s" % (displayFormat, variableName))
        import sys
        sys.exit(1)

    def generateCode(self,filename):
        self.generateVariableSetterCode(filename)

    def generateVariableSetterCode(self,filename):
        with open(filename, 'w') as f:
            line = """//This file has been automatically generated by generateCcodeVariableSetterFile.py\n\n"""
            f.write(line)
            f.write(self.getSerialInputFunctions())
            
            
            f.write(self.generateSendOneVariableViaJson())
            
            lines = r"""
void printFirstVariableNameJson(char * variableName)
{
  Serial1.print("\"");
  Serial1.print(variableName);
  Serial1.print("\":");
}

void printVariableNameJson(char * variableName)
{
  Serial1.print(",\"");
  Serial1.print(variableName);
  Serial1.print("\":");
}

"""
            f.write(lines)
            
            
            # The JSON sending function
            line = """void sendTunableVariablesAsJson()\n"""
            f.write(line)
            f.write("{\n")
            f.write("""\tSerial1.print("{");\n""")            
            first = True
            for v in config.variable:
                if first == True:
                    line = """\tprintFirstVariableNameJson("%s");\n""" % v.name
                    first = False
                else:
                    line = """\tprintVariableNameJson("%s");\n""" % v.name
                f.write(line)
                
                
                digits = 1
                if v.displayFormat[-1] is 'f':
                    digits = 6
                if v.displayFormat[1] is '.':
                    digits = int(v.displayFormat[2:-1])

                line = """\tSerial1.print(%s,%d);\n""" % (v.name,digits)
                f.write(line)
            f.write("""\tSerial1.println("}");  // Message END""")
                
            f.write("}\n")
            f.write("}\n\n")

            
            
            
            line = """void setNewVariableValue(char *variableName, char * newValueBuf)\n"""
            f.write(line)
            f.write("{\n")
        
            # Generate code for accepting new variable values.
            for v in config.variable:
                line = """\tif (strcmp(variableName,"%s") == 0)""" % v.name
                f.write(line)
                f.write("{")
                convertVariableCode = self.getVariableTypeFromDisplayFormat(v.displayFormat, v.name)
                line = """\t%s""" % convertVariableCode
                f.write(line)
                variableAsJson = self.getCodeToSendVariableViaJson(v.displayFormat, v.name)
                line = """\t%s""" % variableAsJson
                f.write(line)
                
                f.write("}\n")


            line = """\tif (strcmp(variableName,"GET_VARIABLE_VALUES") == 0)\n"""
            f.write(line)
            f.write("\t{\n")
            f.write("""\t\tsendTunableVariablesAsJson();\n""")            
            f.write("\t}\n")
            f.write("}\n")
        
        
            
        

            
if __name__ == '__main__':

    filename = "variableTuner.ino"
    genCcode = GenereateCcodeVariableTunerFile()
    genCcode.generateCode(filename)
    